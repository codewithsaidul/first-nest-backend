import { INestApplication, ValidationPipe } from '@nestjs/common';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  let app: INestApplication;

  try {
    app = await NestFactory.create(AppModule);

    // тЬЕ ржзрж╛ржк рзз: NestJS-ржХрзЗ рж╢рж╛ржЯржбрж╛ржЙржи рж╕рж┐ржЧржирзНржпрж╛рж▓рзЗрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд ржХрж░рж╛
    // ржПржЯрж┐ NestJS-ржПрж░ ржирж┐ржЬрзЗрж░ рж▓рж╛ржЗржлрж╕рж╛ржЗржХрзЗрж▓ ржорзЗржержбржЧрзБрж▓рзЛржХрзЗ (ржпрзЗржоржи onModuleDestroy) ржЪрж╛рж▓рзБ ржХрж░рзЗ
    app.enableShutdownHooks();

    // ---- ржЖржкржирж╛рж░ Express ржХрзЛржбрзЗрж░ ржорждрзЛ рж╕ржм ржзрж░ржирзЗрж░ Event рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ ----

    // рзи. рж╕рж┐ржЧржирзНржпрж╛рж▓ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ (Ctrl+C ржмрж╛ рж╕рж╛рж░рзНржнрж╛рж░ ржХрж┐рж▓ рж╕рж┐ржЧржирзНржпрж╛рж▓рзЗрж░ ржЬржирзНржп)
    process.on('SIGINT', async () => {
      console.warn('ЁЯФД Received SIGINT, shutting down gracefully...');
      await shutdown(app);
    });

    process.on('SIGTERM', async () => {
      console.warn('ЁЯФД Received SIGTERM, shutting down gracefully...');
      await shutdown(app);
    });

    // рзй. ржХрзЛржбрзЗ ржзрж░рж╛ ржкрзЬрзЗржирж┐ ржПржоржи рж╕ржм Exception рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ
    process.on('uncaughtException', async (error: Error) => {
      console.error('ЁЯТе Uncaught Exception:', error);
      await shutdown(app, 1);
    });

    // рзк. ржХрзЛржбрзЗ ржзрж░рж╛ ржкрзЬрзЗржирж┐ ржПржоржи Promise Rejection рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ
    process.on('unhandledRejection', async (reason: any, promise: Promise<any>) => {
      console.error('ЁЯТе Unhandled Rejection at:', promise, 'reason:', reason);
      await shutdown(app, 1);
    });

    //-------------------------------------------------------------

    app.useGlobalPipes(
      new ValidationPipe({
        transform: true,
        transformOptions: {
          enableImplicitConversion: true, // тЬЕ ржПржЗ ржЕржкрж╢ржиржЯрж┐ 'true'/'false' рж╕рзНржЯрзНрж░рж┐ржВржХрзЗ ржмрзБрж▓рж┐рзЯрж╛ржирзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗ
        },
        whitelist: true,
      }),
    );
    app.setGlobalPrefix('/api/v1');

    const port = process.env.PORT ?? 3000;
    await app.listen(port);
    console.log(`ЁЯЪА Server is running on port ${port}`);
  } catch (error) {
    console.error(`тЭМ Error during server startup:`, error);
    process.exit(1);
  }
}

/**
 * ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржиржЯрж┐ рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ ржмржирзНржз ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ ржлрж╛ржВрж╢ржи
 * @param app NestJS ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕
 * @param exitCode ржкрзНрж░рж╕рзЗрж╕ ржерзЗржХрзЗ ржмрзЗрж░ рж╣ржУрзЯрж╛рж░ ржХрзЛржб (0 = success, 1 = error)
 */
async function shutdown(app: INestApplication, exitCode: number = 0) {
  if (app) {
    await app.close();
    console.log('тЬЕ Server shutdown complete.');
  }
  process.exit(exitCode);
}

(async () => {
  await bootstrap();
})();
